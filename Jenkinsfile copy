pipeline {
    agent any

    stages {

        stage('checkout') {
            steps {
                git branch: 'main', url: 'https://eodgeorge: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@github.com/eodgeorge/Jenkins-Pipeline-Project-01.git'
            }
        }
        stage('Code Analysis') {
            steps {
                withSonarQubeEnv('sonar') {
                    sh 'mvn sonar:sonar -Dsonar.java.binaries=target/classes -Dsonar.tests=target/test-classes'
                }
            }
        }
        stage("Quality Gate") {
            steps {
                timeout(time: 2, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
        stage('Build Artifact') {
            steps {
                sh 'sudo mvn package -Dmaven.test.skip'
            }
        }
        stage('Docker-Build') {
            steps {
                sh 'docker build -t gooseline .'
                sh 'docker tag gooseline eodgeorge/gooselive:v5'
            }
        }
        stage('Trivy Security Scan') {
            steps {
                script {
                    def dockerImageTag = 'eodgeorge/gooselive:v5'
                    def scanOutput = sh(script: "sudo trivy image --severity HIGH,CRITICAL '${dockerImageTag}'", returnStdout: true).trim()
                    echo scanOutput
                    if (scanOutput.contains('CRITICAL') || scanOutput.contains('HIGH')) {
                    error "Vulnerabilities found, failing build"
                    }
                }
            }
        }           
        stage('Push to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-id', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh 'docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD'
                    sh 'docker push eodgeorge/gooselive:v5'
                }
            }
        }
        stage('Trigger Playbooks on Ansible') {
            steps {
                sshagent (['ssh-key']) {
                      sh 'ssh ubuntu@35.178.145.57 -o strictHostKeyChecking=no "sudo /etc/ansible/discovery.sh"' 
                }
            }
        }
    }
}



// -------------------------------------------
// pipeline {
//     agent any

//     stages {

//         stage('github') {
//             steps {
//                 git branch: 'main', url: 'https://github.com/eodgeorge/Jenkins-Pipeline-Project-01.git'
//             }
//         }
//         stage('Code Analysis') {
//             steps {
//                 withSonarQubeEnv('sonar') {
//                     sh "mvn sonar:sonar -Dsonar.java.binaries=target/classes"
//                 }
//             }
//         }
//         stage("Quality Gate") {
//             steps {
//                 timeout(time: 2, unit: 'MINUTES') {
//                     waitForQualityGate abortPipeline: true
//                 }
//             }
//         }
//         stage('Build Artifact') {
//             steps {
//                 sh 'mvn clean package -Dmaven.test.skip'
//             }
//         }
//         stage('Docker-Build') {
//             steps {
//                 sh 'docker build -t gooseline .'
//                 sh "docker tag gooseline eodgeorge/gooselive:v5"
//             }
//         }
//         stage('Trivy Security Scan') {
//             steps {
//                 script {
//                     def dockerImageTag = 'eodgeorge/gooselive:v5'
//                     def scanOutput = sh(script: "trivy image --severity HIGH,CRITICAL '${dockerImageTag}'", returnStdout: true).trim()
//                     echo scanOutput
//                     if (scanOutput.contains('CRITICAL') || scanOutput.contains('HIGH')) {
//                     error "Vulnerabilities found, failing build"
//                     }
//                 }
//             }
//         }
//         stage('Push to Docker Hub') {
//             steps {
//                 withCredentials([usernamePassword(credentialsId: 'dockerhub-id', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
//                     sh 'docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD'
//                     sh 'docker push eodgeorge/gooselive:v5'
//                 }
//             }
//         }
//         stage('Trigger Playbooks on Ansible') {
//             steps {
//                 sshagent (['ssh-key']) {
//                       sh 'ssh ubuntu@18.171.175.132 -o strictHostKeyChecking=no "sudo /etc/ansible/discovery.sh"' 
//                 }
//              }
//          }
//      }                   
// }